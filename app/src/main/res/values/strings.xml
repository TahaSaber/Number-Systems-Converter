<resources>
    <string name="app_name">NumberingConversion</string>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="open">Open</string>
    <string name="close">Close</string>
    <string name="help_title">FCI-CU Number Systems Converter</string>
    <string name="help_app_definition">This is an application for converting between various numeral systems, it has 3 options</string>
    <string name="help_first_option">The first option is Number Converter option, this option allows you to covert between decimal, binary, octal and hexadecimal systems. You just need to press on the white square inside specific number system square to convert from this number system to other systems for example if you want to convert decimal value 15 to other systems (binary or octal or hexadecimal), you just need to press on the white square on the first square under (Decimal Result) title, and enter your number then press on convert button, your number automatically will be converted to other systems (binary, octal, and hexadecimal).</string>
    <string name="help_second_option">
        The second option is Binary Formats, this option allows you to convert positive or negative integer numbers from decimal to binary representations (sign and magnitude representation, 1’s complement representation, 2’s complement representation, and excess notation representation). You just need to press on the white square inside (Decimal Result) square and write the integer number you want to convert and the number of bits to display that number and press on convert button. Your number automatically will be converted to all binary representations we mentioned above, for example you want to represent integer number 9 in 8 bits.
\nSign and magnitude (9 in 8 bits = 00001001 and -9 = 10001001). Max - Min
number to store is ±2n-1-1.
\n2-ones Complement (9 in 8 bits = 00001001 and -9 = 11110110). Max – Min number to store is ±2n-1-1.
\n3-twos Complement (9 in 8 bits = 00001001 and -9 = 11110111). Max number
to store is +2n-1-1 and min number is 2n-1.
\n4- Excess notation (9 in 8 bits = 00001001 and -9 = 11110111). Max number to
store is +2n-1-1 and min number is 2n-1.

</string>
    <string name="help_third_option">The third option is Floating Point, this option allows you to decode real number to 8 bits floating point notation (Sign(1 bit)-Exponent(3 bit in excess 4 notation format )-Mantissa (4 bits)) and IEEE754 single precision floating point format, and decoding 8 bits floating point format to real number and IEEE754. You can do the same actions explained above to do your operations.</string>
    <string name="help_foot">Reference: Computer Science an overview 11th edition.\nContact us: tahasaber49@gmail.com</string>

    <string name="about_title">FCI-CU Number Systems Converter</string>
    <string name="about_developed">Developed by Taha Saber</string>
    <string name="about_supervision">Under Supervision of Dr Mohammad El-Ramly </string>
</resources>
